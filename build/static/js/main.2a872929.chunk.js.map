{"version":3,"sources":["Layout/Header.js","Layout/NotFound.js","utils/api/index.js","Layout/Decks/DeckList.js","Layout/Home/Home.js","Layout/Decks/DeckForm.js","Layout/Home/BreadCrumb.js","Layout/Decks/CreateDeck.js","Layout/Decks/EditDeck.js","Layout/Study/StudyCard.js","Layout/Study/StudyDeck.js","Layout/Cards/CardsList.js","Layout/Decks/Deck.js","Layout/Cards/CardForm.js","Layout/Cards/EditCard.js","Layout/Cards/CreateCard.js","Layout/index.js","App.js","index.js"],"names":["Header","className","NotFound","API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","onCancel","a","fetch","response","status","Error","statusText","json","name","console","error","stack","Promise","resolve","listDecks","signal","createDeck","method","body","JSON","stringify","readDeck","deckId","updateDeck","updatedDeck","id","deleteDeck","createCard","card","Number","readCard","cardId","updateCard","updatedCard","deleteCard","append","ListDecks","decks","handleDelete","target","window","confirm","parentNode","value","location","reload","map","index","length","description","to","class","onClick","Home","setDecks","DeckForm","formData","handleChange","handleSubmit","onSubmit","htmlFor","type","onChange","style","width","required","rows","BreadCrumb","linkName","link","pageName","NewDeck","useState","setFormData","history","useHistory","event","newDeck","push","preventDefault","deckCreate","EditDeck","setDeck","useParams","useEffect","loadedDeck","loadDeck","updateDeckData","StudyCard","initialState","onBack","currentCard","studySession","setStudySession","back","front","StudyPage","Object","keys","CardsList","handleCardDelete","then","Deck","handleDeckDelete","CardForm","placeholder","EditCard","setCard","loadCard","updateCardData","NewCard","initialFormState","cardCreate","Layout","abortController","AbortController","loadedDecks","loadDecks","abort","exact","path","StudyDeck","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a872929.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  default value returned if the fetch is cancelled.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\n\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    return await response.json();\n\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options, {});\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options, updatedDeck);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves all cards associated with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to a possible empty array of cards.\n */\nexport async function listCards(deckId, signal) {\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options, card);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options, updatedCard);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { deleteDeck } from \"../../utils/api/index\";\r\n\r\n\r\nfunction ListDecks({ decks }) {\r\n\r\n    const handleDelete = async ({ target }) => {\r\n        const confirm = window.confirm(\"Delete this deck? You will not be able to recover it\")\r\n        if(confirm) {\r\n            const id = target.parentNode.value;\r\n            await deleteDeck(id);\r\n            window.location.reload();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {decks.map((deck, index) => (\r\n                <div className=\"card w-100 my-3\" key={index}>\r\n                    <div className=\"card-body\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-9\">\r\n                                <h3 className=\"card-title\">{deck.name}</h3>\r\n                            </div>\r\n                            <div className=\"col-3\">\r\n                                <p>{deck.cards.length} cards</p>\r\n                            </div>\r\n                        </div>\r\n                        <p className=\"card-text\">{deck.description}</p>\r\n                            <div className=\"container\">\r\n                                <div className = \"row justify-content-between\">\r\n                                    <div className=\"col-4\">\r\n                                        <Link to={`/decks/${deck.id}`}>\r\n                                            <button className=\"btn btn-secondary mr-1\"> \r\n                                            <i class=\"bi bi-eye mr-1\"></i>\r\n                                                View\r\n                                            </button>\r\n                                        </Link>\r\n                                        <Link to={`/decks/${deck.id}/study`}>\r\n                                            <button className=\"btn btn-primary\">\r\n                                            <i className=\"bi bi-book mr-1\"></i>\r\n                                                Study\r\n                                            </button>\r\n                                        </Link>\r\n                                    </div>\r\n                                   <div className=\"col-2\">\r\n                                        <button value={deck.id} className=\"btn btn-danger\" onClick={handleDelete}>\r\n                                        <i class=\"bi bi-trash\"></i>\r\n                                        </button>\r\n                                        </div>\r\n                                </div>\r\n                            </div>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </div>\r\n         )\r\n\r\n}\r\nexport default ListDecks;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ListDecks from \"../Decks/DeckList\";\r\n\r\nfunction Home({ decks, setDecks }) {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Link to=\"/decks/new\">\r\n          <button className=\"btn btn-primary btn-large\">\r\n            <i className=\"bi bi-plus\">Create Deck</i>\r\n          </button>\r\n        </Link>\r\n      </div>\r\n      <ListDecks decks={decks} setDecks={setDecks} />\r\n    </div>\r\n  );\r\n}\r\nexport default Home;\r\n","import React from \"react\";\r\n\r\nfunction DeckForm({ formData, handleChange, handleSubmit }) {\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <label htmlFor=\"name\">\r\n                Name:\r\n                <br />\r\n                <input\r\n                    type=\"text\"\r\n                    id=\"name\"\r\n                    name=\"name\"\r\n                    className=\"form-control\"\r\n                    value={formData.name}\r\n                    onChange={handleChange}\r\n                    style={{ width: \"auto\"}}\r\n                    required\r\n                    />\r\n            </label>\r\n            <br />\r\n            <label htmlFor=\"description\">\r\n                Description:\r\n                <br />\r\n                <textarea\r\n                    id=\"description\"\r\n                    name=\"description\"\r\n                    className=\"form-control\"\r\n                    value={formData.description}\r\n                    onChange={handleChange}\r\n                    rows=\"4\"\r\n                    style={{ width: \"100%\"}}\r\n                    required\r\n                />\r\n            </label>\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\nexport default DeckForm;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction BreadCrumb({ linkName=\"\", link=\"\", pageName=\"Page Name\"}) {\r\n    return (\r\n        <nav aria-label=\"breadcrumb\">\r\n            <ol className=\"breadcrumb\">\r\n                <li className=\"breadcrumb-item text-secondary\">\r\n            <Link className=\"m-1\" to=\"/\"><i className=\"bi bi-house m-1\"></i>Home</Link>\r\n            </li>\r\n            \r\n                {link !== \"\" ? <li className=\"breadcrumb-item text-secondary\">\r\n                    <p className=\"m-1 text-info\"></p>\r\n                    <Link to={link}>{linkName}</Link>\r\n                    </li>\r\n                    : \"\"}\r\n    \r\n\r\n            <li className=\"breadcrumb-item active\" aria-current=\"page\">\r\n                <p className=\"m-1 text-info\">{pageName}</p>\r\n            </li>\r\n          </ol>\r\n        </nav>\r\n\r\n    )\r\n}\r\n\r\nexport default BreadCrumb;","import React, { useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport DeckForm from \"./DeckForm\";\r\nimport BreadCrumb from \"../Home/BreadCrumb\";\r\nimport { createDeck } from \"../../utils/api/index\";\r\n\r\nfunction NewDeck() {\r\n    const initialFormState = {\r\n        name:\"\",\r\n        description:\"\"\r\n    };\r\n\r\n    const [formData, setFormData] = useState({...initialFormState});\r\n    const history= useHistory();\r\n\r\n    //set form data with change handler\r\n    const handleChange= ({target}) => {\r\n        setFormData({\r\n            ...formData,\r\n            [target.name]: target.value\r\n        })\r\n    }\r\n\r\n    //create new deck with submit handler\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        async function deckCreate() {\r\n            try{\r\n                const newDeck= await createDeck(formData);\r\n                history.push(`/decks/${newDeck.id}`);\r\n            }catch (error) {\r\n                if(error!==\"AbortError\") {\r\n                    throw error;\r\n                }\r\n            }\r\n        }\r\n        deckCreate();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <BreadCrumb link={`/decks/new`} pageName={\"Create Deck\"} />\r\n            <div>\r\n                <h1>Create Deck</h1>\r\n                <br />\r\n                <DeckForm formData={formData} handleChange={handleChange} handleSubmit={handleSubmit} />\r\n                <br />\r\n                <br />\r\n                <Link to=\"/\"><button className=\"btn btn-secondary mr-1\">Cancel</button></Link>\r\n                <button type=\"submit\" className=\"btn btn-primary mr-1\" onClick={handleSubmit}>Submit</button>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default NewDeck;","import React, { useState, useEffect } from \"react\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\nimport DeckForm from \"./DeckForm\";\r\nimport BreadCrumb from \"../Home/BreadCrumb\";\r\nimport { readDeck, updateDeck } from \"../../utils/api/index\";\r\n\r\nfunction EditDeck() {\r\n\r\n    const initialFormState = {\r\n        name:\"\",\r\n        description:\"\"\r\n    }\r\n\r\n    const [deck, setDeck] = useState({...initialFormState});\r\n    const history = useHistory();\r\n    const { deckId } = useParams();\r\n\r\n    useEffect(() => {\r\n        async function loadDeck() {\r\n            try {\r\n                const loadedDeck = await readDeck(deckId);\r\n                setDeck(loadedDeck);\r\n            } catch (error) {\r\n                if (error.name!==\"AbortError\") {\r\n                    throw error;\r\n                }\r\n            }\r\n        }\r\n        loadDeck();\r\n    }, [deckId]);\r\n\r\n    const handleChange = ({target}) => {\r\n        setDeck({\r\n            ...deck,\r\n            [target.name]: target.value\r\n        });\r\n    };\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        async function updateDeckData() {\r\n                await updateDeck(deck);\r\n                history.push(`/decks/${deck.id}`);\r\n        }\r\n        updateDeckData();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <BreadCrumb link={`/decks/${deckId}/edit`} linkName={deck.name} pageName={\"Edit\"} />\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <h1>Edit Deck</h1>\r\n                    <br />\r\n                </div>\r\n                <div className=\"row w-100\">\r\n            \r\n                    <DeckForm formData={deck} handleChange={handleChange} handleSubmit={handleSubmit}/>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                    <Link to={`/decks/${deckId}`}><button className=\"btn btn-secondary mr-1\">Cancel</button></Link>\r\n                    <button type=\"submit\" className=\"btn btn-primary\" onClick={handleSubmit}>Save</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n       \r\n    )\r\n}\r\n\r\nexport default EditDeck;\r\n","import React, { useState } from \"react\";\r\nimport { useHistory, Link, useParams } from \"react-router-dom\";\r\n\r\n\r\nfunction StudyCard({cards}) {\r\n    const initialState = {\r\n        onBack: false,\r\n        currentCard: 0,\r\n    };\r\n\r\n    const { deckId } = useParams();\r\n    const history = useHistory();\r\n    const [studySession, setStudySession] = useState({...initialState});\r\n   \r\n    \r\n    const handleNext = () => {\r\n        //Go to next card until the last card is reached\r\n        if (studySession.currentCard < cards.length - 1) {\r\n            setStudySession({\r\n                ...studySession,\r\n                currentCard: studySession.currentCard + 1,\r\n                onBack: false,\r\n            })\r\n        } \r\n        else {\r\n            const confirm = window.confirm(\"Restart cards? Click cancel to return to the home page.\");\r\n            if(confirm) {\r\n                setStudySession(initialState);\r\n            } else {\r\n                history.push(\"/\");\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    const handleFlip = () => {\r\n        if (studySession.onBack) {\r\n            setStudySession({\r\n                ...studySession,\r\n                onBack: false\r\n            }) \r\n        } else {\r\n            setStudySession({\r\n                ...studySession,\r\n                onBack: true\r\n            })\r\n        }\r\n    }\r\n    \r\n   \r\n    if (cards.length > 2) {\r\n        return (\r\n           <div className=\"container\">\r\n            <div className=\"card w-100\">\r\n                <div className=\"card-body\">\r\n                    <h4 className=\"card-title\">\r\n                        Card {studySession.currentCard + 1} of {cards.length}\r\n                    </h4>\r\n                    <p className=\"card-text font-weight-lighter\">\r\n                        {studySession.onBack \r\n                        ? cards[studySession.currentCard].back\r\n                        : cards[studySession.currentCard].front\r\n                        }                      \r\n                    </p>\r\n                    <button className=\"btn btn-secondary mr-1\" onClick={handleFlip}>Flip</button>\r\n                    {studySession.onBack && (\r\n                        <button className=\"btn btn-primary\" onClick={handleNext}>Next</button>\r\n                    )}\r\n                </div>\r\n            </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <>\r\n            <h3>Not enough cards.</h3>\r\n            <div className=\"row my-2\">\r\n                <p>You need at least 3 cards to study. This deck has {cards} cards.</p>\r\n            </div>\r\n            <div className=\"row\">\r\n                    <Link to={`/decks/${deckId}/cards/new`}>\r\n                            <button className=\"btn btn-primary\">\r\n                                <i class=\"bi bi-plus mr-1\"></i>\r\n                                Add Card\r\n                            </button>\r\n                        </Link>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default StudyCard;","import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { readDeck } from \"../../utils/api/index\";\r\nimport BreadCrumb from \"../Home/BreadCrumb\";\r\nimport StudyCard from \"./StudyCard\";\r\n\r\nfunction StudyPage() {\r\n  const [deck, setDeck] = useState({});\r\n  const { deckId } = useParams();\r\n\r\n  useEffect(() => {\r\n    async function loadDeck() {\r\n      const newDeck = await readDeck(deckId);\r\n      setDeck(newDeck);\r\n    }\r\n    loadDeck();\r\n  }, [deckId]);\r\n\r\n  if (Object.keys(deck).length) {\r\n    return (\r\n      <div>\r\n        <BreadCrumb\r\n          link={`/decks/${deckId}`}\r\n          linkName={deck.name}\r\n          pageName={\"Study\"}\r\n        />\r\n        <div className=\"row\">\r\n          <h2>Study: {deck.name}</h2>\r\n        </div>\r\n        <div className=\"row\">\r\n          <StudyCard cards={deck.cards} />\r\n        </div>\r\n      </div>\r\n    );\r\n  } else return \"Loading deck here...\";\r\n}\r\n\r\nexport default StudyPage;\r\n","import React from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport { deleteCard, updateDeck} from '../../utils/api/index';\r\n\r\nfunction CardsList({ deck }) {\r\n    const { deckId }=useParams();\r\n\r\n\r\n    //delete a card\r\n    const handleCardDelete = async ({ target }) => {\r\n        const confirm = window.confirm(\"Delete this card? You will not be able to recover it.\");\r\n        if (confirm) {\r\n            deleteCard(target.value)\r\n            .then(updateDeck(deckId))\r\n            .then(window.location.reload());\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n          <h2>Cards</h2>\r\n          <div className=\"card-list\">\r\n              {deck.cards.map((card) => (\r\n                  <div className=\"card\" key={card.id}>\r\n                      <div className=\"card-body\">\r\n                          <div className=\"container\">\r\n                              <div className=\"row justify-content-start my-2\">\r\n                                  <div className=\"col-6\">\r\n                                      {card.front}\r\n                                  </div>\r\n                                  <div className=\"col-6\">\r\n                                      {card.back}\r\n                                  </div>\r\n                              </div>\r\n                              <div className=\"row\">\r\n                                  <div className=\"col-9\">\r\n\r\n                                  </div>\r\n                                  <div className=\"col-3 pt-2 pb-1\">\r\n                                      <Link to={`/decks/${deckId}/cards/${card.id}/edit`}><button className=\"btn btn-secondary mr-1\"><i className=\"bi bi-pencil mr-1\"></i>Edit</button></Link>\r\n                                      <button onClick={handleCardDelete} value={card.id} className=\"btn btn-danger\"><i value={card.id}className=\"bi bi-trash\"></i></button>\r\n                                  </div>\r\n                              </div>\r\n                          </div>\r\n                      </div>\r\n                  </div>\r\n              ))}\r\n              </div>\r\n            </div>\r\n        )\r\n              \r\n}\r\nexport default CardsList;","import React, { useState, useEffect } from \"react\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\nimport { readDeck, deleteDeck } from \"../../utils/api/index\";\r\nimport BreadCrumb from \"../Home/BreadCrumb\";\r\nimport CardsList from \"../Cards/CardsList\";\r\n\r\nfunction Deck() {\r\n    const { deckId } = useParams();\r\n    const history = useHistory();\r\n    const [deck, setDeck] = useState({});\r\n\r\n\r\n    //load deck & cards\r\n    useEffect(() => {\r\n        async function loadDeck() {\r\n                if (deckId) {\r\n                const loadedDeck = await readDeck(deckId);\r\n                setDeck(()=>loadedDeck);\r\n                }\r\n            }\r\n        loadDeck();\r\n    }, [deckId]);\r\n\r\n    //delete the deck \r\n    const handleDeckDelete = async () => {\r\n        const confirm = window.confirm(\"Delete this deck? You will not be able to recover it.\");\r\n        if (confirm) {\r\n            await deleteDeck(deckId);\r\n            history.push(\"/\");\r\n        }\r\n    };\r\n\r\n\r\nif (deck.id) {\r\n        return (\r\n            <div>\r\n            <BreadCrumb link={`/decks/${deckId}`} linkName={deck.name} pageName={deck.name} />\r\n                <h3>{deck.name}</h3>\r\n                <p>{deck.description}</p>\r\n                 <div className=\"row justify-content-between\">\r\n                    <div className=\"col-8\">\r\n                        <Link to={`/decks/${deckId}/edit`}>\r\n                            <button className=\"btn btn-secondary mr-1\">\r\n                                <i class=\"bi bi-pencil mr-1\"></i>\r\n                                Edit\r\n                            </button>\r\n                        </Link>\r\n                        <Link to={`/decks/${deckId}/study`}>\r\n                            <button className=\"btn btn-primary mr-1\">\r\n                                <i class=\"bi bi-book mr-1\"></i>\r\n                                Study\r\n                            </button>\r\n                        </Link>\r\n                        <Link to={`/decks/${deckId}/cards/new`}>\r\n                            <button className=\"btn btn-primary\">\r\n                                <i class=\"bi bi-plus mr-1\"></i>\r\n                                Add Card\r\n                            </button>\r\n                        </Link>\r\n                    </div>\r\n                    <div className=\"col-2\">\r\n                        <button className=\"btn btn-danger\" onClick={handleDeckDelete}><i className=\"bi bi-trash\"></i></button>\r\n                    </div>\r\n                </div>\r\n                <CardsList deck={deck} />\r\n                </div>\r\n            \r\n        )\r\n      } \r\n              return \"No deck here! Please create a new deck.\"\r\n    }\r\n\r\n\r\nexport default Deck;","import React from \"react\";\r\n\r\nfunction CardForm({ formData, handleChange, handleSubmit }) {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label htmlFor=\"front\">\r\n        Front\r\n        <br />\r\n        <textarea\r\n          id=\"front\"\r\n          name=\"front\"\r\n          className=\"form-control\"\r\n          value={formData.front}\r\n          onChange={handleChange}\r\n          placeholder=\"Front of Card\"\r\n          rows=\"4\"\r\n          style={{ width: \"100%\" }}\r\n          required\r\n        />\r\n      </label>\r\n      <br />\r\n      <label htmlFor=\"back\">\r\n        back\r\n        <br />\r\n        <textarea\r\n          id=\"back\"\r\n          name=\"back\"\r\n          className=\"form-control\"\r\n          value={formData.back}\r\n          onChange={handleChange}\r\n          placeholder=\"Back of Card\"\r\n          rows=\"4\"\r\n          style={{ width: \"100%\" }}\r\n          required\r\n        />\r\n      </label>\r\n    </form>\r\n  );\r\n}\r\nexport default CardForm;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\nimport CardForm from \"./CardForm\";\r\nimport BreadCrumb from \"../Home/BreadCrumb\";\r\nimport { readDeck, readCard, updateCard } from \"../../utils/api/index\";\r\n\r\nfunction EditCard() {\r\n    const { deckId, cardId }= useParams();\r\n    const history = useHistory();\r\n    const [deck, setDeck] = useState({});\r\n    const [card, setCard] = useState({});\r\n\r\n    //load deck and card\r\n    useEffect(() => {\r\n        const loadDeck = async () => setDeck(await readDeck(deckId));\r\n        loadDeck();\r\n        const loadCard = async () => setCard(await readCard(cardId));\r\n        loadCard();\r\n    }, [deckId, cardId])\r\n\r\n    //create change handler for form\r\n    const handleChange = ({ target }) => {\r\n        setCard({\r\n            ...card,\r\n            [target.name]: target.value\r\n        });\r\n    };\r\n\r\n    //create submit handler to save edits\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        async function updateCardData() {\r\n            try {\r\n                await updateCard(card);\r\n                history.push(`/decks/${deckId}`);\r\n            } catch (error) {\r\n                if (error.name!== \"AbortError\"){\r\n                    throw error;\r\n                }\r\n            }\r\n        }\r\n        updateCardData();\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <BreadCrumb link={`/decks/${deckId}`} linkName={`Deck ${deck.name}`} pageName={`Edit Card ${cardId}`} />\r\n            <div className= \"row w-100\">\r\n                <CardForm formData={card} handleChange={handleChange} handleSubmit={handleSubmit} />\r\n            </div>\r\n            <div className= \"row w-100\">\r\n                <Link to ={`/decks/${deckId}`} className=\"btn btn-secondary mr-1\">Cancel</Link>\r\n                <button type=\"submit\" className=\"btn btn-primary\" onClick={handleSubmit}>Save</button>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default EditCard;","import React, { useState, useEffect } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport CardForm from './CardForm';\r\nimport BreadCrumb from '../Home/BreadCrumb';\r\nimport { readDeck, createCard } from '../../utils/api/index';\r\n\r\nfunction NewCard() {\r\n    const { deckId } = useParams();\r\n\r\n    const initialFormState={\r\n        front:\"\",\r\n        back:\"\",\r\n        deckId: deckId,\r\n        id: 0,\r\n    };\r\n     \r\n    const [ deck, setDeck ]= useState([]);\r\n    const [formData, setFormData]= useState({...initialFormState});\r\n\r\n    const handleChange= ({ target }) => {\r\n        setFormData({\r\n            ...formData,\r\n            [target.name]: target.value\r\n        });\r\n    };\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        async function cardCreate() {\r\n            try{\r\n                await createCard(deckId,formData);\r\n                setFormData({...initialFormState});\r\n            } catch (error) {\r\n               if(error.name !== \"AbortError\") {\r\n                   throw error;\r\n               }\r\n            }\r\n        }\r\n      cardCreate();\r\n    }\r\n\r\n    useEffect(() => {\r\n        async function loadDeck() {\r\n            const loadedDeck= await readDeck(deckId);\r\n            setDeck(() => loadedDeck);\r\n        }\r\n        loadDeck();\r\n    },[deckId])\r\n\r\n    return (\r\n        <div>\r\n            <BreadCrumb link={`decks/${deck.id}`} linkName={deck.name} pageName={\"Add Card\"} />\r\n              <div className='row'>\r\n                  <h2>{deck.name}:Add Card</h2>\r\n                  <br />\r\n                  <br />\r\n               </div>\r\n              <div className='row'>\r\n                 <CardForm formData={formData} handleChange={handleChange} handleSubmit={handleSubmit} />\r\n                 <br />\r\n              </div>\r\n              <div className='row'>\r\n                  <Link to={`decks/${deck.id}`} className= 'btn btn-secondary mr-1'>Done</Link>\r\n                  <button type=\"submit\" className= 'btn btn-primary' onClick={handleSubmit}>Save</button>\r\n              </div>\r\n        </div>\r\n    )\r\n};\r\nexport default NewCard;","import React, {useEffect, useState} from \"react\";\nimport Header from \"./Header\";\nimport NotFound from \"./NotFound\";\nimport {Route, Switch} from \"react-router-dom\";\nimport Home from \"./Home/Home\";\nimport NewDeck from \"./Decks/CreateDeck\";\nimport EditDeck from \"./Decks/EditDeck\";\nimport StudyDeck from \"./Study/StudyDeck\";\nimport Deck from \"./Decks/Deck\";\nimport EditCard from \"./Cards/EditCard\";\nimport NewCard from \"./Cards/CreateCard\";\nimport StudyCard from \"./Study/StudyCard\";\nimport { listDecks } from \"../utils/api/index\";\n\nfunction Layout() {\n\n  const [decks, setDecks] = useState([]);\n\n  //load decks\n  useEffect(() => {\n    //declare abort Controller\n    setDecks([]);\n    const abortController = new AbortController();\n    //loading of decks from API\n    async function loadDecks() {\n      try {\n        const loadedDecks = await listDecks();\n        setDecks(loadedDecks);\n      } catch (error) {\n        if (error.name !== \"AbortError\") {\n          throw error;\n        }\n      }\n    }\n    loadDecks();\n    return() => abortController.abort();\n  }, []);\n\n  return (\n    <div>\n      <Header />\n      <div className=\"container\">\n        <Switch>\n          <Route exact path=\"/\">\n            <Home decks={decks}/>\n          </Route>\n          <Route path={\"/decks/new\"}>\n            <NewDeck />\n          </Route>\n          <Route path={\"/decks/:deckId/cards/:cardId/edit\"}>\n            <EditCard />\n          </Route>\n          <Route path={\"/decks/:deckId/cards/:cardId/study\"}>\n            <StudyCard/>\n          </Route>\n          <Route path={\"/decks/:deckId/cards/new\"}>\n            <NewCard />\n          </Route>\n          <Route path={\"/decks/:deckId/edit\"}>\n            <EditDeck />\n          </Route>\n          <Route path={\"/decks/:deckId/study\"}>\n            <StudyDeck />\n          </Route>\n          <Route exact path={\"/decks/:deckId\"}>\n            <Deck />\n          </Route>\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}